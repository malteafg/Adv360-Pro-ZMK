macro_åå: macro_åå{
compatible = "zmk,behavior-macro";
label = "macro_åå";
#binding-cells = <0>;
bindings = <&kp LS(A)>, <&kp LS(A)>;
};
macro_øø: macro_øø{
compatible = "zmk,behavior-macro";
label = "macro_øø";
#binding-cells = <0>;
bindings = <&kp LS(O)>, <&kp LS(E)>;
};
macro_ææ: macro_ææ{
compatible = "zmk,behavior-macro";
label = "macro_ææ";
#binding-cells = <0>;
bindings = <&kp LS(A)>, <&kp LS(E)>;
};
macro_å: macro_å{
compatible = "zmk,behavior-macro";
label = "macro_å";
#binding-cells = <0>;
bindings = <&kp A>, <&kp A>;
};
macro_ø: macro_ø{
compatible = "zmk,behavior-macro";
label = "macro_ø";
#binding-cells = <0>;
bindings = <&kp O>, <&kp E>;
};
macro_æ: macro_æ{
compatible = "zmk,behavior-macro";
label = "macro_æ";
#binding-cells = <0>;
bindings = <&kp A>, <&kp E>;
};
macro_diveq: macro_diveq{
compatible = "zmk,behavior-macro";
label = "macro_diveq";
#binding-cells = <0>;
bindings = <&kp KP_DIVIDE>, <&kp EQUAL>;
};
macro_right: macro_right{
compatible = "zmk,behavior-macro";
label = "macro_right";
#binding-cells = <0>;
bindings = <&kp MINUS>, <&kp GREATER_THAN>;
};
macro_left: macro_left{
compatible = "zmk,behavior-macro";
label = "macro_left";
#binding-cells = <0>;
bindings = <&kp LESS_THAN>, <&kp MINUS>;
};
macro_minuseq: macro_minuseq{
compatible = "zmk,behavior-macro";
label = "macro_minuseq";
#binding-cells = <0>;
bindings = <&kp MINUS>, <&kp EQUAL>;
};
macro_muleq: macro_muleq{
compatible = "zmk,behavior-macro";
label = "macro_muleq";
#binding-cells = <0>;
bindings = <&kp ASTERISK>, <&kp EQUAL>;
};
macro_equal: macro_equal{
compatible = "zmk,behavior-macro";
label = "macro_equal";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&kp EQUAL>;
};
macro_or: macro_or{
compatible = "zmk,behavior-macro";
label = "macro_or";
#binding-cells = <0>;
bindings = <&kp PIPE>, <&kp PIPE>;
};
macro_and: macro_and{
compatible = "zmk,behavior-macro";
label = "macro_and";
#binding-cells = <0>;
bindings = <&kp AMPERSAND>, <&kp AMPERSAND>;
};
macro_pluseq: macro_pluseq{
compatible = "zmk,behavior-macro";
label = "macro_pluseq";
#binding-cells = <0>;
bindings = <&kp PLUS>, <&kp EQUAL>;
};
macro_careteq: macro_careteq{
compatible = "zmk,behavior-macro";
label = "macro_careteq";
#binding-cells = <0>;
bindings = <&kp CARET>, <&kp EQUAL>;
};
macro_ngeq: macro_ngeq{
compatible = "zmk,behavior-macro";
label = "macro_ngeq";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&kp GREATER_THAN>;
};
macro_shright: macro_shright{
compatible = "zmk,behavior-macro";
label = "macro_shright";
#binding-cells = <0>;
bindings = <&kp GREATER_THAN>, <&kp GREATER_THAN>;
};
macro_shleft: macro_shleft{
compatible = "zmk,behavior-macro";
label = "macro_shleft";
#binding-cells = <0>;
bindings = <&kp LESS_THAN>, <&kp LESS_THAN>;
};
macro_nleq: macro_nleq{
compatible = "zmk,behavior-macro";
label = "macro_nleq";
#binding-cells = <0>;
bindings = <&kp EQUAL>, <&kp LESS_THAN>;
};
macro_geq: macro_geq{
compatible = "zmk,behavior-macro";
label = "macro_geq";
#binding-cells = <0>;
bindings = <&kp GREATER_THAN>, <&kp EQUAL>;
};
macro_leq: macro_leq{
compatible = "zmk,behavior-macro";
label = "macro_leq";
#binding-cells = <0>;
bindings = <&kp LESS_THAN>, <&kp EQUAL>;
};
macro_neq: macro_neq{
compatible = "zmk,behavior-macro";
label = "macro_neq";
#binding-cells = <0>;
bindings = <&kp EXCLAMATION>, <&kp EQUAL>;
};